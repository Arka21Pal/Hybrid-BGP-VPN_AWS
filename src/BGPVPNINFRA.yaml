Description:  Advanced Demo - HA BGP Site-to-Site VPN - MUST be applied in us-east-1

Parameters:
  LatestAmiId:
    Description: AMI for Misc Instances (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  RouterAmiId:
    Description: AMI for the Router Instances (don't change)
    Type: 'String'
    Default: 'ami-0ac80df6eff0e70b5'
  Branch:
    Description: which branch to pull assets from, usually master/main (don't change this)
    Type: 'String'
    Default: 'master'
    AllowedValues:
      - 'master'
      - 'stage'
      - 'dev'
  ProjectName:
    Description: project name used for auto build, don't change this
    Type: 'String'
    Default: 'aws-hybrid-bgpvpn'

Resources:

  # Create Cloud VPC
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: A4L-AWS

  # Subnet for AZ A in Cloud VPC
  AWSSubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: Name
          Value: sn-aws-private-A

  # Subnet for AZ B in Cloud VPC
  AWSSubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AWSVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.96.0/20
      Tags:
        - Key: Name
          Value: sn-aws-private-B

  # Custom Route table to connect to VGW/TGW (VPN Gateway/Transit Gateway) at the edge of Cloud VPC
  AWSCustomRT: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref AWSVPC
      Tags:
      - Key: Name
        Value: A4L-AWS-RT

  # Default route to forward traffic
  # Like default routes in most routers, 0.0.0.0/0 means any traffic meant for the internet
  AWSTGWDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: "AWSTGWVPC"
    Properties:
      TransitGatewayId: !Ref AWSTGW
      RouteTableId: !Ref AWSCustomRT
      DestinationCidrBlock: "0.0.0.0/0"

  # Route Table Association with private subnet A
  AWSRTAssociationPrivateA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AWSSubnetPrivateA
      RouteTableId:
        Ref: AWSCustomRT

  # Route Table Association with private subnet B
  AWSRTAssociationPrivateB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AWSSubnetPrivateB
      RouteTableId:
        Ref: AWSCustomRT

  # Security Group for EC2 instances in Cloud VPC
  AWSInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref AWSVPC
      GroupDescription: Default A4L AWS SG
      SecurityGroupIngress: 
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow ALL from ONPREM Networks'
          IpProtocol: "-1"
          CidrIp: '192.168.8.0/21'

  # Adds an inbound rule to the security group AWSInstanceSG for Cloud VPC
  AWSInstanceSGSelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref AWSInstanceSG

  # specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify.
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref AWSInstanceSG

  # EC2 instance A for subnet A in Cloud VPC
  # Instance profile contains definition of IAM role, defined later
  AWSEC2A:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AWSssminterfaceendpoint
      - AWSssmec2messagesinterfaceendpoint
      - AWSssmmessagesinterfaceendpoint
    Properties:
      InstanceType: "t3.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref AWSEC2InstanceProfile
      SubnetId: !Ref AWSSubnetPrivateA
      SecurityGroupIds: 
        - !Ref AWSInstanceSG
      Tags:
        - Key: Name
          Value: AWS-EC2-A

  # EC2 instance B for subnet B in Cloud VPC
  # Instance profile contains definition of IAM role, defined later
  AWSEC2B:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AWSssminterfaceendpoint
      - AWSssmec2messagesinterfaceendpoint
      - AWSssmmessagesinterfaceendpoint
    Properties:
      InstanceType: "t3.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref AWSEC2InstanceProfile
      SubnetId: !Ref AWSSubnetPrivateB
      SecurityGroupIds: 
        - !Ref AWSInstanceSG
      Tags:
        - Key: Name
          Value: AWS-EC2-B

  # Role for EC2 instances in Cloud VPC
  AWSEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            #  temporary security credentials created by AssumeRole can be used to make API calls to any AWS service
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                # ssm allows for remote control over EC2 instances, over using ssh
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'
  
  # Use to pass an IAM role to EC2 instance
  AWSEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref AWSEC2Role

  # VPC Endpoint to interface with EC2 using ssm
  AWSssminterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref AWSSubnetPrivateA
        - !Ref AWSSubnetPrivateB
      SecurityGroupIds:
        - !Ref AWSInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref AWSVPC

  AWSssmec2messagesinterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref AWSSubnetPrivateA
        - !Ref AWSSubnetPrivateB
      SecurityGroupIds:
        - !Ref AWSInstanceSG

      # API operations are made to the Amazon Message Delivery Service endpoint. Systems Manager uses this endpoint for API operations from Systems Manager Agent (SSM Agent) to the Systems Manager service in the cloud. This endpoint is required to send and receive commands.
      # https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref AWSVPC

  AWSssmmessagesinterfaceendpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref AWSSubnetPrivateA
        - !Ref AWSSubnetPrivateB
      SecurityGroupIds:
        - !Ref AWSInstanceSG

      # Systems Manager uses the ssmmessages endpoint for API operations from SSM Agent to Session Manager
      # Required to create and delete session channels with the Session Manager service in the cloud.
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref AWSVPC

  # Provides a hub and spoke design for connecting VPCs and on-premises networks
  # https://docs.aws.amazon.com/whitepapers/latest/building-scalable-secure-multi-vpc-network-infrastructure/transit-gateway.html
  AWSTGW:
    Type: "AWS::EC2::TransitGateway"
    Properties:

      # https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayOptions.html
      # A private Autonomous System Number (ASN) for the Amazon side of a BGP session. Default: 64512
      AmazonSideAsn: 64512
      Description: "A4LTGW"
      DefaultRouteTableAssociation: "enable"
      DnsSupport: "enable"

      # Indicates whether Equal Cost Multipath Protocol support is enabled
      VpnEcmpSupport: "enable"

  # Attaches a VPC to a transit gateway
  AWSTGWVPC:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref AWSSubnetPrivateA
        - !Ref AWSSubnetPrivateB
      Tags:
        - Key: Name
          Value: A4LTGWATTACHMENT
      TransitGatewayId: !Ref AWSTGW
      VpcId: !Ref AWSVPC


# -----------------------------------


  # Create simulation of on-premises infrastructure with second VPC
  ONPREMVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.8.0/21
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ONPREM

  # Internet gateway to access the internet from on-prem VPC
  ONPREMInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: IGW-ONPREM

  # Attach on-prem VPC to IGW
  ONPREMInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref ONPREMVPC
      InternetGatewayId: !Ref ONPREMInternetGateway

  # Public Subnet for on-prem VPC
  # Required for internet traffic
  ONPREMPub:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref ONPREMVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 192.168.12.0/24
      Tags:
        - Key: Name
          Value: ONPREM-PUBLIC

  # On-prem VPC private subnet 1
  ONPREMPriv1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ONPREMVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Name
          Value: ONPREM-PRIVATE-1

  # On-prem VPC private subnet 2 
  ONPREMPriv2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ONPREMVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 192.168.11.0/24
      Tags:
        - Key: Name
          Value: ONPREM-PRIVATE-2

  # Route table for private subnet 1 in on-prem deployment
  ONPREMPrivateRT1: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ONPREMVPC
      Tags:
      - Key: Name
        Value: ONPREM-PRIVATE-RT1

  # Route table for private subnet 2 in on-prem deployment
  ONPREMPrivateRT2: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ONPREMVPC
      Tags:
      - Key: Name
        Value: ONPREM-PRIVATE-RT2
  
  # Public route table for internet traffic in on-prem deployment
  ONPREMPublicRT: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ONPREMVPC
      Tags:
      - Key: Name
        Value: ONPREM-PUBLIC-RT

  # Default route for internet traffic in public subnet for on-prem deployment
  ONPREMRouteDefaultIPV4Pub: 
    Type: 'AWS::EC2::Route'
    DependsOn: ONPREMInternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: ONPREMPublicRT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: ONPREMInternetGateway

  # Insert route into private route table for subnet 1 in on-prem deployment
  ONPREMRoute1AWSIPv4:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: ONPREMPrivateRT1
      DestinationCidrBlock: '10.16.0.0/16'
      NetworkInterfaceId: !Ref ONPREMENIR1PRIVATE

  # Insert route into private route table for subnet 2 in on-prem deployment
  ONPREMRoute2AWSIPv4:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: ONPREMPrivateRT2
      DestinationCidrBlock: '10.16.0.0/16'
      # Network interface defined below (ON PREM ENI R2 PRIVATE)
      NetworkInterfaceId: !Ref ONPREMENIR2PRIVATE

  # Associate private route table for Subnet 1, with Subnet 1 in on-prem deployment
  ONPREMRTOnPremPriv1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ONPREMPriv1
      RouteTableId:
        Ref: ONPREMPrivateRT1

  # Associate private route table for Subnet 2, with Subnet 2 in on-prem deployment
  ONPREMRTOnPremPriv2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ONPREMPriv2
      RouteTableId:
        Ref: ONPREMPrivateRT2

  # Associate public route table for Public Subnet, with Public Subnet in on-prem deployment
  ONPREMRTOnPremPub:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ONPREMPub
      RouteTableId:
        Ref: ONPREMPublicRT

  # Assign Elastic IP address for an interface, meant for router 1 on EC2 instance, for on-prem deployment
  Router1EIP:
    Type: AWS::EC2::EIP
    DependsOn: ONPREMInternetGatewayAttachment

  # Associate EIP to Public Network Interface for router 1 in on-prem deployment
  # Network interface for router defined a bit later (after configuration)
  Router1EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt Router1EIP.AllocationId
      NetworkInterfaceId: !GetAtt ONPREMENIR1PUBLIC.Id

  # Define on-prem router 1
  ONPREMRouter1:
    Type: AWS::EC2::Instance
    # Used for communication with EC2 instance hosting router
    DependsOn: 
      - ONPREMssmVPCe
      - ONPREMssmec2messagesVPCe
      - ONPREMssmmessagesVPCe
    Properties:
      # Network interfaces defined after configuration
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref ONPREMENIR1PUBLIC
        DeviceIndex: 0
      - NetworkInterfaceId: !Ref ONPREMENIR1PRIVATE
        DeviceIndex: 1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      InstanceType: "t3.micro"
      ImageId: !Ref RouterAmiId
      # Assign EC2 role by associating respective Instance profile (defined below)
      IamInstanceProfile: !Ref ONPREMEC2InstanceProfile
      Tags:
        - Key: Name
          Value: ONPREM-ROUTER1
      # FFRouting lets the routers be part of the BGP peering process
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get install -y strongswan wget
            mkdir /home/ubuntu/demo_assets
            cd /home/ubuntu/demo_assets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter1/ipsec-vti.sh
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter1/ipsec.conf
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter1/ipsec.secrets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter1/51-eth1.yaml
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter1/ffrouting-install.sh
            chown ubuntu:ubuntu /home/ubuntu/demo_assets -R
            cp /home/ubuntu/demo_assets/51-eth1.yaml /etc/netplan
            netplan --debug apply

  # Private Network interface used for Router 1
  ONPREMENIR1PRIVATE:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref ONPREMPriv1
      Description: Router1 PRIVATE INTERFACE
      GroupSet: 
      - !Ref ONPREMInstanceSG
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: ONPREM-R1-PRIVATE
  
  # Public Network interface used for Router 1
  ONPREMENIR1PUBLIC:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref ONPREMPub
      Description: Router1 PUBLIC INTERFACE
      GroupSet: 
      - !Ref ONPREMInstanceSG
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: ONPREM-R1-PUBLIC

  
  # Assign Public Elastic IP address to be used for Router 2
  Router2EIP:
    Type: AWS::EC2::EIP
    DependsOn: ONPREMInternetGatewayAttachment

  # Associate EIP with Router 2
  Router2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt Router2EIP.AllocationId
      NetworkInterfaceId: !GetAtt ONPREMENIR2PUBLIC.Id

  # Define Router 2 in on-prem deployment
  ONPREMRouter2:
    Type: AWS::EC2::Instance
    DependsOn:
      - ONPREMssmVPCe
      - ONPREMssmec2messagesVPCe
      - ONPREMssmmessagesVPCe
    Properties:
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref ONPREMENIR2PUBLIC
        DeviceIndex: 0
      - NetworkInterfaceId: !Ref ONPREMENIR2PRIVATE
        DeviceIndex: 1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      InstanceType: "t3.micro"
      ImageId: !Ref RouterAmiId
      # Assign EC2 role by associating respective Instance profile (defined below)
      IamInstanceProfile: !Ref ONPREMEC2InstanceProfile
      Tags:
        - Key: Name
          Value: ONPREM-ROUTER2
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get install -y strongswan wget
            mkdir /home/ubuntu/demo_assets
            cd /home/ubuntu/demo_assets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter2/ipsec-vti.sh
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter2/ipsec.conf
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter2/ipsec.secrets
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter2/51-eth1.yaml
            wget https://raw.githubusercontent.com/acantril/learn-cantrill-io-labs/${Branch}/${ProjectName}/OnPremRouter2/ffrouting-install.sh
            chown ubuntu:ubuntu /home/ubuntu/demo_assets -R
            cp /home/ubuntu/demo_assets/51-eth1.yaml /etc/netplan
            netplan --debug apply

  # Create public network interface for Router 2
  ONPREMENIR2PUBLIC:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref ONPREMPub
      Description: Router2 PUBLIC INTERFACE
      GroupSet:
      - !Ref ONPREMInstanceSG
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: ONPREM-R2-PUBLIC

  # Create private network interface for Router 2
  ONPREMENIR2PRIVATE:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref ONPREMPriv2
      Description: Router2 PRIVATE INTERFACE
      GroupSet:
      - !Ref ONPREMInstanceSG
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: ONPREM-R2-PRIVATE


  # Create server 1 in on-prem deployment
  ONPREMSERVER1:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ONPREMssmVPCe
      - ONPREMssmec2messagesVPCe
      - ONPREMssmmessagesVPCe
    Properties:
      InstanceType: "t3.micro"
      ImageId: !Ref LatestAmiId
      # Assign EC2 role by associating respective Instance profile (defined below)
      IamInstanceProfile: !Ref ONPREMEC2InstanceProfile
      SubnetId: !Ref ONPREMPriv1
      SecurityGroupIds: 
        - !Ref ONPREMInstanceSG
      Tags:
        - Key: Name
          Value: ONPREM-SERVER1

  # Create server 2 in on-prem deployment
  ONPREMSERVER2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - ONPREMssmVPCe
      - ONPREMssmec2messagesVPCe
      - ONPREMssmmessagesVPCe
    Properties:
      InstanceType: "t3.micro"
      ImageId: !Ref LatestAmiId
      # Assign EC2 role by associating respective Instance profile (defined below)
      IamInstanceProfile: !Ref ONPREMEC2InstanceProfile
      SubnetId: !Ref ONPREMPriv2
      SecurityGroupIds: 
        - !Ref ONPREMInstanceSG
      Tags:
        - Key: Name
          Value: ONPREM-SERVER2

  # Create EC2 role for on-prem servers
  ONPREMEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel' 
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'

  # Create an EC2 instance profile and provide the role defined for EC2 instances in on-prem deployment
  ONPREMEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ONPREMEC2Role

  # Create security group for on-prem EC2 instances
  ONPREMInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref ONPREMVPC
      GroupDescription: Default ONPREM SG
      SecurityGroupIngress: 
        - Description: 'Allow All from AWS Environment'
          IpProtocol: '-1'
          CidrIp: '10.16.0.0/16'

  # Provide ingress rule to access EC2 instances through SG
  ONPREMInstanceSGSelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ONPREMInstanceSG
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ONPREMInstanceSG

  # Create VPC endpoint for ssm in on-prem deployment
  ONPREMssmVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref ONPREMPub
      SecurityGroupIds:
        - !Ref ONPREMInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref ONPREMVPC

  # Create VPC endpoint for ec2messages in on-prem deployment
  ONPREMssmec2messagesVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref ONPREMPub
      SecurityGroupIds:
        - !Ref ONPREMInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref ONPREMVPC

  # Create VPC endpoint for ssmmessages in on-prem deployment
  ONPREMssmmessagesVPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: "True"
      SubnetIds:
        - !Ref ONPREMPub
      SecurityGroupIds:
        - !Ref ONPREMInstanceSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref ONPREMVPC

  # Create VPC endpoint for s3 in on-prem deployment
  ONPREMs3VPCe:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref ONPREMPublicRT
        - !Ref ONPREMPrivateRT1
        - !Ref ONPREMPrivateRT2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref ONPREMVPC


# ----------------------


Outputs:
  Router1Public:
    Description: Public IP of Router1
    Value: !GetAtt ONPREMRouter1.PublicIp
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ONPREMRouter1PublicIp"
  Router2Public:
    Description: Public IP of Router2
    Value: !GetAtt ONPREMRouter2.PublicIp
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ONPREMRouter2PublicIp"
  AWSTGWID:
    Description: Transit Gateway ID
    Value: !GetAtt AWSTGW.Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AWSTGWId"
  Router1Private:
    Description: Private IP of Router1
    Value: !GetAtt ONPREMRouter1.PrivateIp
  Router2Private:
    Description: Private IP of Router2
    Value: !GetAtt ONPREMRouter2.PrivateIp

